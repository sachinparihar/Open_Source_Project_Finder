{"ast":null,"code":"// src/services/auth.js\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\n// src/services/auth.js\nconst msalConfig = {\n  auth: {\n    clientId: process.env.REACT_APP_AZURE_CLIENT_ID,\n    authority: `https://login.microsoftonline.com/${process.env.REACT_APP_AZURE_TENANT_ID}`,\n    redirectUri: window.location.origin\n  }\n};\nexport const msalInstance = new PublicClientApplication(msalConfig);\n\n// Helper to acquire token silently or via popup\nexport async function getToken(scopes = [\"openid\", \"profile\", \"email\"]) {\n  const accounts = msalInstance.getAllAccounts();\n  if (accounts.length > 0) {\n    try {\n      const silentResult = await msalInstance.acquireTokenSilent({\n        scopes,\n        account: accounts[0]\n      });\n      return silentResult.idToken;\n    } catch (e) {\n      // fallback to popup\n      const popupResult = await msalInstance.acquireTokenPopup({\n        scopes\n      });\n      return popupResult.idToken;\n    }\n  }\n  // no account, user must login first\n  return null;\n}","map":{"version":3,"names":["PublicClientApplication","msalConfig","auth","clientId","process","env","REACT_APP_AZURE_CLIENT_ID","authority","REACT_APP_AZURE_TENANT_ID","redirectUri","window","location","origin","msalInstance","getToken","scopes","accounts","getAllAccounts","length","silentResult","acquireTokenSilent","account","idToken","e","popupResult","acquireTokenPopup"],"sources":["/home/kali/Open_Source_Project_Finder/frontend/src/services/auth.js"],"sourcesContent":["// src/services/auth.js\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\n// src/services/auth.js\nconst msalConfig = {\n  auth: {\n    clientId: process.env.REACT_APP_AZURE_CLIENT_ID,\n    authority: `https://login.microsoftonline.com/${process.env.REACT_APP_AZURE_TENANT_ID}`,\n    redirectUri: window.location.origin,\n  },\n};\n\n\nexport const msalInstance = new PublicClientApplication(msalConfig);\n\n// Helper to acquire token silently or via popup\nexport async function getToken(scopes = [\"openid\", \"profile\", \"email\"]) {\n  const accounts = msalInstance.getAllAccounts();\n  if (accounts.length > 0) {\n    try {\n      const silentResult = await msalInstance.acquireTokenSilent({\n        scopes,\n        account: accounts[0],\n      });\n      return silentResult.idToken;\n    } catch (e) {\n      // fallback to popup\n      const popupResult = await msalInstance.acquireTokenPopup({ scopes });\n      return popupResult.idToken;\n    }\n  }\n  // no account, user must login first\n  return null;\n}\n"],"mappings":"AAAA;AACA,SAASA,uBAAuB,QAAQ,qBAAqB;;AAE7D;AACA,MAAMC,UAAU,GAAG;EACjBC,IAAI,EAAE;IACJC,QAAQ,EAAEC,OAAO,CAACC,GAAG,CAACC,yBAAyB;IAC/CC,SAAS,EAAE,qCAAqCH,OAAO,CAACC,GAAG,CAACG,yBAAyB,EAAE;IACvFC,WAAW,EAAEC,MAAM,CAACC,QAAQ,CAACC;EAC/B;AACF,CAAC;AAGD,OAAO,MAAMC,YAAY,GAAG,IAAIb,uBAAuB,CAACC,UAAU,CAAC;;AAEnE;AACA,OAAO,eAAea,QAAQA,CAACC,MAAM,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC,EAAE;EACtE,MAAMC,QAAQ,GAAGH,YAAY,CAACI,cAAc,CAAC,CAAC;EAC9C,IAAID,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAE;IACvB,IAAI;MACF,MAAMC,YAAY,GAAG,MAAMN,YAAY,CAACO,kBAAkB,CAAC;QACzDL,MAAM;QACNM,OAAO,EAAEL,QAAQ,CAAC,CAAC;MACrB,CAAC,CAAC;MACF,OAAOG,YAAY,CAACG,OAAO;IAC7B,CAAC,CAAC,OAAOC,CAAC,EAAE;MACV;MACA,MAAMC,WAAW,GAAG,MAAMX,YAAY,CAACY,iBAAiB,CAAC;QAAEV;MAAO,CAAC,CAAC;MACpE,OAAOS,WAAW,CAACF,OAAO;IAC5B;EACF;EACA;EACA,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}